<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 잊혀져 가는 기억을 기록하기 ....</title>
    <link>/post/</link>
    <description>Recent content in Posts on 잊혀져 가는 기억을 기록하기 ....</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2022. All right reserved.</copyright>
    <lastBuildDate>Wed, 28 Dec 2022 22:59:31 +0900</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Canvas 를 이용한 삼각함수 이해 02</title>
      <link>/post/math/trigonometric_002/</link>
      <pubDate>Wed, 28 Dec 2022 22:59:31 +0900</pubDate>
      
      <guid>/post/math/trigonometric_002/</guid>
      <description>삼각함수 응용 앞서 정리한 내용을 바탕으로 물체의 회전에 적용되는 행렬을 정리해 보고자 합니다.
먼저 몇가지 사항을 확인해 보겠습니다.
원점 0,0 에서 반지름 R(구체적으로 1이라 하겠습니다.)로 시작하는 각을(theta) 0 ~ 360 도로 증가하면서 좌표 ( cos(theta), sin(theta) ) 를 연결하면 원을 그릴 수 있습니다. ( 그림 - 소스는 하단에 설명 )
두점 사이의 거리 그림에서 O 와 P 의 거리를 (선분 OP) 는 반지름이 1 이라면, 알파(alpha) 가 45도 라고 가정할 때 1 * Math.</description>
    </item>
    
    <item>
      <title>Canvas 를 이용한 삼각함수 이해 01</title>
      <link>/post/math/trigonometric_001/</link>
      <pubDate>Tue, 27 Dec 2022 23:10:59 +0900</pubDate>
      
      <guid>/post/math/trigonometric_001/</guid>
      <description>Html5 Canvas Web 에서 일반적인 언어의 Graphics 를 사용하는 것과 유사한 작업을 가능하게 해주는 모듈이 추가된지도 꽤 오랜 시간이 흘렀습니다. 돌이켜 보면 SVG 라는 도형을 그리는 표준이 d3.js 라는 뛰어난 라이브러리로, Chart 등에서 맹위를 떨치던 시간이 그리 오래 전이 아닌데 벌써, 트랜드의 한축이 넘어가는 느낌이 듭니다.
현재 많은 차트 라이브러리에서 SVG 에서 점차 CANVAS 로 옮겨가는 추세 입니다. svg는 web 에서 느린 자원이 아닙니다. 게다가 가 도형별 shape 별 event 처리가 canvas 에 비해 훨씬 수월 합니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 02 [ 06 ]</title>
      <link>/post/webmodule/webgl_part_006/</link>
      <pubDate>Sat, 24 Dec 2022 20:05:10 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_006/</guid>
      <description>처음 시작할 때 주의할 내용 WebGL을 처음 구성하려 할 때 가장 먼저 부딛히는 부분이 저 같은 경우, 익숙하지 않은 용어와 수식이 난무 하는 설명 이었습니다.
이미 수학적인 기초가 튼튼하게 다져진 분들은 상관이 없겠지만, 저처럼 익숙하지 않은 용어에, 덧붙인 수식 기호 등은 프로그램밍에 대한 접근을 막는 부분 이었습니다.
프로그램을 구현할 때 필요한 부분은 해당 수식에 대한 증명이 아니라, 원리에 대한 기본적인 이해와,
그 이해를 바탕으로 공식화된 수식을 활용할 수 있다면, 프로그램을 구성하는데 문제는 없어 보입니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 01 [ 05 ]</title>
      <link>/post/webmodule/webgl_part_005/</link>
      <pubDate>Fri, 23 Dec 2022 19:18:51 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_005/</guid>
      <description>프로그램을 위한 준비 제한사항 현재 WebGL2 는 IE를 제외한 대부분의 Browser 에서 사용가능합니다.
Web 에서 3D를 구현하는 방법도 OpenGL 기반의 WebGL 에서, 더 다양한 지원이 가능한
WebGPU 등의 표준화가 진행중입니다. 현재 사용중인 Web 에서 3D를 구성하는 방법에도 변화가 있을 수 있는 상황입니다.
언제나 그렇듯 변화가 많을 경우, API 하나 하나 공부하는 것은 그리 효율적인지 않은 방법 같습니다. 동작의 기본 원리를 이해해 두면, 향후 어떤 변화가 나타나도 적응하는데 유리할 것 같습니다. WebGL 관련 코드는 WebGL 2.</description>
    </item>
    
    <item>
      <title>WebGL2 - Matrix 연산 01 [ 04 ]</title>
      <link>/post/webmodule/webgl_part_004/</link>
      <pubDate>Wed, 21 Dec 2022 22:47:18 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_004/</guid>
      <description>WebGL 에서 행렬이란 ? $$ \begin{bmatrix}1&amp;amp;2&amp;amp;3\\4&amp;amp;5&amp;amp;6\\7&amp;amp;8&amp;amp;9 \end{bmatrix} \begin{bmatrix}1\\4\\7\\ \end{bmatrix} \begin{bmatrix}1&amp;amp;2&amp;amp;3 \end{bmatrix} $$
위 표에서 전체 행렬이 1 ~ 9 까지의 내용을 담은 3 x 3 행렬 이라면, 1,4,7 은 열( Column ) 이고 1,2,3 은 행(Row) 라고 불립니다. 위 표의 행렬은 행 3개와 열 3개로 이뤄진 3 x 3 행렬인 셈입니다.
WebGL(3D 프로그램) 에서 행렬이 왜 사용되는 걸까요? 어떤 물체가 100개의 꼭지점을 갇고, 그 꼭지점을 연결한 위치 정보를 지니고 있다고 가정하겠습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Vector 연산 02 [ 03 ]</title>
      <link>/post/webmodule/webgl_part_003/</link>
      <pubDate>Tue, 20 Dec 2022 21:26:00 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_003/</guid>
      <description>백터의 사칙 연산 벡터의 사칙연산(더하기, 빼기, 곱하기, 나누기) 은 일반 수의 연산과 거의 동알하다고 생각하면 될 것 같습니다. 약간의 차이란, Vector 안에 있는 순서에 맞게 계산해 주는 부분만 조금 다를 뿐입니다.
가령 [1,2,3] 의 a vector 가 있고, [4,5,6] 의 b vector 가 있을 때 a + b = [1+4, 2+5, 3+6 ] 으로 표현할 수 있습니다. a-b = [1-4, 2-5, 3-6] 이고, a*b, a/b 도 동일한 연산을 사용한다고 보면 될 것 같습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Vector 연산 01 [ 02 ]</title>
      <link>/post/webmodule/webgl_part_002/</link>
      <pubDate>Mon, 19 Dec 2022 21:35:47 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_002/</guid>
      <description>WebGL 벡터란 ? 프로그래밍 관점에서 보면, WebGL 에서 사용하는 벡터란 , 대부분 x,y 로 표기되는 원소가 두개인 배열 혹은 x,y,z 으로 표기 되는 원소가 3개인 배열 정도로 이해 할 수 있을 것 같습니다. 배열을 기준으로 보면 1차원 배열의 원소의 갯수만 차이가 있는 것이고, 데이터가 [1,2,3] 이 있을 때 행(Row) 을 기준으로 보면 행백터 이고, 열(Column) 을 기준 으로 보면 열백터로 지칭하고 있습니다. 아래의 예에서와 같이 세로, 가로로 이해하면 편할것 같습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - 개발방법 [ 01 ]</title>
      <link>/post/webmodule/webgl_part_001/</link>
      <pubDate>Sun, 18 Dec 2022 20:58:24 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_001/</guid>
      <description>WebGL2 에 대한 간단한 소개 현재 Web에서 3D를 사용할 수 있는 방법은 WebGL2가 가장 최근에 확정된 규약이고, 해당 기술은 OpenGL ES 300 을 기준으로 구성되어 있습니다.
WEBGPU 라는 Spec 이 공표되고 테스트가 진행 중이지만, 현재까지 Chrome 등의 Browser 에서 Default 로 지원되지는 않습니다.
WebGL2 는 IE를 제외한 대부분의 Browser 에서 지원하고 있기 때문에, Web에서 3D를 구현하려면, WebGL2를 활용하는게 좋을 것 같습니다.
WebGL2 Library WebGL 을 사용하는 가장 간단한 방법은 잘 구성된, 모듈을 사용하는 것이 가장 빠르고 편한 방법입니다.</description>
    </item>
    
    <item>
      <title>Hugo Blog로 시작하기</title>
      <link>/post/common/init/</link>
      <pubDate>Sun, 18 Dec 2022 12:07:36 +0900</pubDate>
      
      <guid>/post/common/init/</guid>
      <description>Hugo Blog 설치를 위한 간단한 내용</description>
    </item>
    
  </channel>
</rss>
