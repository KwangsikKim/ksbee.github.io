<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language on 잊혀져 가는 기억을 기록하기 ....</title>
    <link>/tags/language/</link>
    <description>Recent content in Language on 잊혀져 가는 기억을 기록하기 ....</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2022. All right reserved.</copyright>
    <lastBuildDate>Tue, 03 Jan 2023 21:49:38 +0900</lastBuildDate><atom:link href="/tags/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Canvas 기반 도형 맞추기 Game 02</title>
      <link>/post/webcanvas/web_canvas_003/</link>
      <pubDate>Tue, 03 Jan 2023 21:49:38 +0900</pubDate>
      
      <guid>/post/webcanvas/web_canvas_003/</guid>
      <description>Canvas Game Event 구성 도형 구성과 배치를 위한 UI 가 구성되었으면, 이제 사용자가 선택후 Drag &amp;amp; Drop 으로 위치를 맞추고, 그 결과를 담아 내기 위한 Event 처리가 필요합니다. 요즘은 PC 가 아닌, 핸드폰에서도 Web 접근이 가능하기 때문에 Phone Device 를 위한 Event 처리를 위해서는 touchstart 등의 이벤트도 정리하여야 하지만, 이 글에서는 다루지 않겠습니다.
다음주소 에서 확인해 보실 수 있습니다.
Initialize 시점에 Event 구성 초기화 과정에 Canvas 에 Mouse Event 를 할당 하는 과정 입니다.</description>
    </item>
    
    <item>
      <title>Web Canvas 기반 도형 맞추기 Game 01</title>
      <link>/post/webcanvas/web_canvas_002/</link>
      <pubDate>Sun, 01 Jan 2023 21:08:32 +0900</pubDate>
      
      <guid>/post/webcanvas/web_canvas_002/</guid>
      <description>Canvas 만들고자 하는 Game 은? HTML5 가 도입되면서, 정확히는 canvas 가 기술 표준으로 정해지면서, Web 에서 구성할 수 있는 Application 같은 프로그램을 만들 가능성이 많이 높아진것 같습니다. 하지만, 표(Table 같은 Grid) 와 이미지 정렬, Text 정보 등을 기반으로 하는 업무 시스템에서는 Canvas 와 같은 기술은 그렇게 많이 활용되지는 못하고 있는것 같습니다. 그나마, Chart 등에서 SVG 에서 Canvas 로 점차 기술적인 전환이 이뤄지고 있지만, 아직도 많은 시스템에서는 활용하고 있지 않은것도 사실입니다.</description>
    </item>
    
    <item>
      <title>Html Canvas 로 그려본 아날로그 시계</title>
      <link>/post/webcanvas/web_canvas_001/</link>
      <pubDate>Sun, 01 Jan 2023 14:12:44 +0900</pubDate>
      
      <guid>/post/webcanvas/web_canvas_001/</guid>
      <description>Canvas 아날로그 시계 Canvas 를 활용하여 구성할 수 있는 다양한 모듈이 있습니다. Canvas 는 Web 에서 Graphics 자원을 어느정도 사용할 수 있다는 장점이 있습니다. 일반적이진 않지만, Web 화면을 Application 처럼 구성할 수 있다는 장점 때문에 개인적으로 선호하는 Web 모듈 이기도 합니다.
시계는 Canvas 를 어떻게 활용할 수 있는지 확인해 볼 수 있는 좋은 소품이란 생각이 들어 간단히 구성해 보았습니다.
초침의 삼각형, 원에서 표현할 위치 등을 위해서는, 간단한 삼각함수를 활용하여야 하기 때문에 정리하기도 좋을것 같아서 선택해 보았습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 03 [ 07 ]</title>
      <link>/post/webmodule/webgl_part_007/</link>
      <pubDate>Mon, 26 Dec 2022 21:59:21 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_007/</guid>
      <description>프로그램 Rendeing 과정 앞서 WebGL 사용 방법에 대해 간단히 정리해 보았습니다. 다시 한번 정리하면
canvas 객체를 구성합니다. GL 객체를 가져옵니다. ( Canvas 를 통해 webgl2 를 가져옵니다. ) GLSL Shader 소스(문자열) 을 Vertex Shader, Fragment Shader 를 구성합니다. Shader Program 을 각각 만들어 두개의 쌍을 사용할 GL Program 을 만들고 Compile 합니다. 일반적으로 프로그램 소스를 구성해서 Compile 하는 것과 유사한 흐름 입니다.
당연히 프로그램을 구성할 때 사용한 소스에서 정의한 input 과 output 규칙은 따라야 합니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 02 [ 06 ]</title>
      <link>/post/webmodule/webgl_part_006/</link>
      <pubDate>Sat, 24 Dec 2022 20:05:10 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_006/</guid>
      <description>처음 시작할 때 주의할 내용 WebGL을 처음 구성하려 할 때 가장 먼저 부딛히는 부분이 저 같은 경우, 익숙하지 않은 용어와 수식이 난무 하는 설명 이었습니다.
이미 수학적인 기초가 튼튼하게 다져진 분들은 상관이 없겠지만, 저처럼 익숙하지 않은 용어에, 덧붙인 수식 기호 등은 프로그램밍에 대한 접근을 막는 부분 이었습니다.
프로그램을 구현할 때 필요한 부분은 해당 수식에 대한 증명이 아니라, 원리에 대한 기본적인 이해와,
그 이해를 바탕으로 공식화된 수식을 활용할 수 있다면, 프로그램을 구성하는데 문제는 없어 보입니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 01 [ 05 ]</title>
      <link>/post/webmodule/webgl_part_005/</link>
      <pubDate>Fri, 23 Dec 2022 19:18:51 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_005/</guid>
      <description>프로그램을 위한 준비 제한사항 현재 WebGL2 는 IE를 제외한 대부분의 Browser 에서 사용가능합니다.
Web 에서 3D를 구현하는 방법도 OpenGL 기반의 WebGL 에서, 더 다양한 지원이 가능한
WebGPU 등의 표준화가 진행중입니다. 현재 사용중인 Web 에서 3D를 구성하는 방법에도 변화가 있을 수 있는 상황입니다.
언제나 그렇듯 변화가 많을 경우, API 하나 하나 공부하는 것은 그리 효율적인지 않은 방법 같습니다. 동작의 기본 원리를 이해해 두면, 향후 어떤 변화가 나타나도 적응하는데 유리할 것 같습니다. WebGL 관련 코드는 WebGL 2.</description>
    </item>
    
    <item>
      <title>WebGL2 - Matrix 연산 01 [ 04 ]</title>
      <link>/post/webmodule/webgl_part_004/</link>
      <pubDate>Wed, 21 Dec 2022 22:47:18 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_004/</guid>
      <description>WebGL 에서 행렬이란 ? $$ \begin{bmatrix}1&amp;amp;2&amp;amp;3\\4&amp;amp;5&amp;amp;6\\7&amp;amp;8&amp;amp;9 \end{bmatrix} \begin{bmatrix}1\\4\\7\\ \end{bmatrix} \begin{bmatrix}1&amp;amp;2&amp;amp;3 \end{bmatrix} $$
위 표에서 전체 행렬이 1 ~ 9 까지의 내용을 담은 3 x 3 행렬 이라면, 1,4,7 은 열( Column ) 이고 1,2,3 은 행(Row) 라고 불립니다. 위 표의 행렬은 행 3개와 열 3개로 이뤄진 3 x 3 행렬인 셈입니다.
WebGL(3D 프로그램) 에서 행렬이 왜 사용되는 걸까요? 어떤 물체가 100개의 꼭지점을 갇고, 그 꼭지점을 연결한 위치 정보를 지니고 있다고 가정하겠습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Vector 연산 02 [ 03 ]</title>
      <link>/post/webmodule/webgl_part_003/</link>
      <pubDate>Tue, 20 Dec 2022 21:26:00 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_003/</guid>
      <description>백터의 사칙 연산 벡터의 사칙연산(더하기, 빼기, 곱하기, 나누기) 은 일반 수의 연산과 거의 동알하다고 생각하면 될 것 같습니다. 약간의 차이란, Vector 안에 있는 순서에 맞게 계산해 주는 부분만 조금 다를 뿐입니다.
가령 [1,2,3] 의 a vector 가 있고, [4,5,6] 의 b vector 가 있을 때 a + b = [1+4, 2+5, 3+6 ] 으로 표현할 수 있습니다. a-b = [1-4, 2-5, 3-6] 이고, a*b, a/b 도 동일한 연산을 사용한다고 보면 될 것 같습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Vector 연산 01 [ 02 ]</title>
      <link>/post/webmodule/webgl_part_002/</link>
      <pubDate>Mon, 19 Dec 2022 21:35:47 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_002/</guid>
      <description>WebGL 벡터란 ? 프로그래밍 관점에서 보면, WebGL 에서 사용하는 벡터란 , 대부분 x,y 로 표기되는 원소가 두개인 배열 혹은 x,y,z 으로 표기 되는 원소가 3개인 배열 정도로 이해 할 수 있을 것 같습니다. 배열을 기준으로 보면 1차원 배열의 원소의 갯수만 차이가 있는 것이고, 데이터가 [1,2,3] 이 있을 때 행(Row) 을 기준으로 보면 행백터 이고, 열(Column) 을 기준 으로 보면 열백터로 지칭하고 있습니다. 아래의 예에서와 같이 세로, 가로로 이해하면 편할것 같습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - 개발방법 [ 01 ]</title>
      <link>/post/webmodule/webgl_part_001/</link>
      <pubDate>Sun, 18 Dec 2022 20:58:24 +0900</pubDate>
      
      <guid>/post/webmodule/webgl_part_001/</guid>
      <description>WebGL2 에 대한 간단한 소개 현재 Web에서 3D를 사용할 수 있는 방법은 WebGL2가 가장 최근에 확정된 규약이고, 해당 기술은 OpenGL ES 300 을 기준으로 구성되어 있습니다.
WEBGPU 라는 Spec 이 공표되고 테스트가 진행 중이지만, 현재까지 Chrome 등의 Browser 에서 Default 로 지원되지는 않습니다.
WebGL2 는 IE를 제외한 대부분의 Browser 에서 지원하고 있기 때문에, Web에서 3D를 구현하려면, WebGL2를 활용하는게 좋을 것 같습니다.
WebGL2 Library WebGL 을 사용하는 가장 간단한 방법은 잘 구성된, 모듈을 사용하는 것이 가장 빠르고 편한 방법입니다.</description>
    </item>
    
    <item>
      <title>Hugo Blog로 시작하기</title>
      <link>/post/common/init/</link>
      <pubDate>Sun, 18 Dec 2022 12:07:36 +0900</pubDate>
      
      <guid>/post/common/init/</guid>
      <description>Hugo Blog 설치를 위한 간단한 내용</description>
    </item>
    
  </channel>
</rss>
