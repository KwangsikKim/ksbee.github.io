<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebGL on 잊혀져 가는 기억을 기록하기 ....</title>
    <link>https://ksbee21.github.io/tags/webgl/</link>
    <description>Recent content in WebGL on 잊혀져 가는 기억을 기록하기 ....</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2022. All right reserved.</copyright>
    <lastBuildDate>Wed, 08 Feb 2023 20:23:34 +0900</lastBuildDate><atom:link href="https://ksbee21.github.io/tags/webgl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebGL2 - Program 시작 07 - Shadow mapping - [ 11 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_011/</link>
      <pubDate>Wed, 08 Feb 2023 20:23:34 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_011/</guid>
      <description>Shadow Mapping 앞에서 Phong 모델에서 제시하는 빛에 대해 간단히 정리해 보았습니다. 빛이 비추는 방향이 물체에 어떻게 영향을 미치는가 하는 부분에서는 그럴듯하게 보이지만, 해당 모델에서는 처리하기 어려운 부분이 빛이 비추는 반대편의 그림자 들입니다. 우리는 빛이 비추면 반대편에 그림자가 지는 당연한 세상에 살고 있지만, 컴퓨터에서는 어떻게 빛과 그림자를 표현할 수 있을까요 ? 원리는 이해하기 그리 어렵지 않습니다. 다만, 프로그램에서 구현하는 부분은 조금 신경써야 할 부분이 있습니다. 그 내용을 정리해 보고자 합니다.
Texture 미포함 - 예제 사이트는 이곳을 클릭하여 확인해 보실 수 있습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 06 - Lighting - [ 10 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_010/</link>
      <pubDate>Sun, 22 Jan 2023 21:34:09 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_010/</guid>
      <description>Phong Lighting 3D 관련하여 빛에 대한 자료를 찾아 보면, Phong 모델에 관한 글을 쉽게 접합 수 있습니다. 그만큼 많이 사용되고, 개념을 이해하는데 도움이 되기 때문에 많이 언급되는 것 같습니다. Phong 모델에서 이야기 하는 난반사(Diffuse), 정반사(Specular), 배경광(Ambient), 발산광(Emit) 을 간단하게 정리해 보고 WegGL로 어떻게 구현할 수 있는지 정리해 보고자 합니다.
이곳에서 적용된 예제를 확인할 수 있습니다.
난반사 ( Diffuse ) 빛이 물체에 부딛혀 여기저기로 흩어지는 상황을 모사하는 방법 입니다.
쉽게 생각해서 정오의 태양이 머리에 있을 때(머리와 직각)일 때 빛을 가장 많이 받을 수 있다는 가정에서 출발하고 있습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 05 - Texture - [ 09 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_009/</link>
      <pubDate>Sun, 15 Jan 2023 13:03:43 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_009/</guid>
      <description>WebGL 에서 Texture 란 ? WebGL 에서 해주는 것은 어떤 특정 pixel 이 무슨 색을 입혀서 출력해야 하는 가를 판단하고, 표현하는 것이 어쩌면 가장 주요한 일이라고 볼 수 있을 것 같습니다. 그 공간에서 하는 일이 앞에 놓인것은 출력하고, 뒤에 있는 것은 출력하지 않고, 만약 투명하다면 색을 투명도에 따라 혼합하여 보여주는 등 내부적인 일은 복잡합니다. 그래도 주어진 좌표를 기준으로 해당 위치에 어떤 색을 출력해야하는지 결정하는 일은 변하지 않습니다. Texture 는 사용에 따라 여러 가지 일을 할 수도 있지만, 가장 본질적인 것은 특정 좌표의 색을 texture 에 기록된 값으로 보정하여 출력하는데 사용되는 것일 겁니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 04 [ 08 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_008/</link>
      <pubDate>Sat, 07 Jan 2023 22:12:46 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_008/</guid>
      <description>WebGL 에서 Camera 란 ? 우리가 사진기( 아마도 핸드폰이겠지요 ^^ )로 물체를 찍는 다고 가정해 보겠습니다. 핸드폰을 들고, 물체를 보면, 핸드폰 화면에는 찍을 대상이 출력되고 있을 겁니다. 이때 카메라 위치가 눈에 해당하고, 찍을 물체가 대상이되고, 핸드폰을 위로 혹은 약간 기울여서 보게 되는게 사진에 찍힐 모습이 될 것 같습니다. 이를 단순화 하면, eye (사진기위치), at( 사진찍을 물체), up ( 핸드폰을 어떻게 기울였는지 - 대부분 위로 ) 에 따라 사진속의 내용이 어떻게 표현될지가 결정 될 것 같습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 03 [ 07 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_007/</link>
      <pubDate>Mon, 26 Dec 2022 21:59:21 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_007/</guid>
      <description>프로그램 Rendeing 과정 앞서 WebGL 사용 방법에 대해 간단히 정리해 보았습니다. 다시 한번 정리하면
canvas 객체를 구성합니다. GL 객체를 가져옵니다. ( Canvas 를 통해 webgl2 를 가져옵니다. ) GLSL Shader 소스(문자열) 을 Vertex Shader, Fragment Shader 를 구성합니다. Shader Program 을 각각 만들어 두개의 쌍을 사용할 GL Program 을 만들고 Compile 합니다. 일반적으로 프로그램 소스를 구성해서 Compile 하는 것과 유사한 흐름 입니다.
당연히 프로그램을 구성할 때 사용한 소스에서 정의한 input 과 output 규칙은 따라야 합니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 02 [ 06 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_006/</link>
      <pubDate>Sat, 24 Dec 2022 20:05:10 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_006/</guid>
      <description>처음 시작할 때 주의할 내용 WebGL을 처음 구성하려 할 때 가장 먼저 부딛히는 부분이 저 같은 경우, 익숙하지 않은 용어와 수식이 난무 하는 설명 이었습니다.
이미 수학적인 기초가 튼튼하게 다져진 분들은 상관이 없겠지만, 저처럼 익숙하지 않은 용어에, 덧붙인 수식 기호 등은 프로그램밍에 대한 접근을 막는 부분 이었습니다.
프로그램을 구현할 때 필요한 부분은 해당 수식에 대한 증명이 아니라, 원리에 대한 기본적인 이해와,
그 이해를 바탕으로 공식화된 수식을 활용할 수 있다면, 프로그램을 구성하는데 문제는 없어 보입니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Program 시작 01 [ 05 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_005/</link>
      <pubDate>Fri, 23 Dec 2022 19:18:51 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_005/</guid>
      <description>프로그램을 위한 준비 제한사항 현재 WebGL2 는 IE를 제외한 대부분의 Browser 에서 사용가능합니다.
Web 에서 3D를 구현하는 방법도 OpenGL 기반의 WebGL 에서, 더 다양한 지원이 가능한
WebGPU 등의 표준화가 진행중입니다. 현재 사용중인 Web 에서 3D를 구성하는 방법에도 변화가 있을 수 있는 상황입니다.
언제나 그렇듯 변화가 많을 경우, API 하나 하나 공부하는 것은 그리 효율적인지 않은 방법 같습니다. 동작의 기본 원리를 이해해 두면, 향후 어떤 변화가 나타나도 적응하는데 유리할 것 같습니다. WebGL 관련 코드는 WebGL 2.</description>
    </item>
    
    <item>
      <title>WebGL2 - Matrix 연산 01 [ 04 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_004/</link>
      <pubDate>Wed, 21 Dec 2022 22:47:18 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_004/</guid>
      <description>WebGL 에서 행렬이란 ? $$ \begin{bmatrix}1&amp;amp;2&amp;amp;3\\4&amp;amp;5&amp;amp;6\\7&amp;amp;8&amp;amp;9 \end{bmatrix} \begin{bmatrix}1\\4\\7\\ \end{bmatrix} \begin{bmatrix}1&amp;amp;2&amp;amp;3 \end{bmatrix} $$
위 표에서 전체 행렬이 1 ~ 9 까지의 내용을 담은 3 x 3 행렬 이라면, 1,4,7 은 열( Column ) 이고 1,2,3 은 행(Row) 라고 불립니다. 위 표의 행렬은 행 3개와 열 3개로 이뤄진 3 x 3 행렬인 셈입니다.
WebGL(3D 프로그램) 에서 행렬이 왜 사용되는 걸까요? 어떤 물체가 100개의 꼭지점을 갇고, 그 꼭지점을 연결한 위치 정보를 지니고 있다고 가정하겠습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Vector 연산 02 [ 03 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_003/</link>
      <pubDate>Tue, 20 Dec 2022 21:26:00 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_003/</guid>
      <description>백터의 사칙 연산 벡터의 사칙연산(더하기, 빼기, 곱하기, 나누기) 은 일반 수의 연산과 거의 동알하다고 생각하면 될 것 같습니다. 약간의 차이란, Vector 안에 있는 순서에 맞게 계산해 주는 부분만 조금 다를 뿐입니다.
가령 [1,2,3] 의 a vector 가 있고, [4,5,6] 의 b vector 가 있을 때 a + b = [1+4, 2+5, 3+6 ] 으로 표현할 수 있습니다. a-b = [1-4, 2-5, 3-6] 이고, a*b, a/b 도 동일한 연산을 사용한다고 보면 될 것 같습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - Vector 연산 01 [ 02 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_002/</link>
      <pubDate>Mon, 19 Dec 2022 21:35:47 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_002/</guid>
      <description>WebGL 벡터란 ? 프로그래밍 관점에서 보면, WebGL 에서 사용하는 벡터란 , 대부분 x,y 로 표기되는 원소가 두개인 배열 혹은 x,y,z 으로 표기 되는 원소가 3개인 배열 정도로 이해 할 수 있을 것 같습니다. 배열을 기준으로 보면 1차원 배열의 원소의 갯수만 차이가 있는 것이고, 데이터가 [1,2,3] 이 있을 때 행(Row) 을 기준으로 보면 행백터 이고, 열(Column) 을 기준 으로 보면 열백터로 지칭하고 있습니다. 아래의 예에서와 같이 세로, 가로로 이해하면 편할것 같습니다.</description>
    </item>
    
    <item>
      <title>WebGL2 - 개발방법 [ 01 ]</title>
      <link>https://ksbee21.github.io/post/webmodule/webgl_part_001/</link>
      <pubDate>Sun, 18 Dec 2022 20:58:24 +0900</pubDate>
      
      <guid>https://ksbee21.github.io/post/webmodule/webgl_part_001/</guid>
      <description>WebGL2 에 대한 간단한 소개 현재 Web에서 3D를 사용할 수 있는 방법은 WebGL2가 가장 최근에 확정된 규약이고, 해당 기술은 OpenGL ES 300 을 기준으로 구성되어 있습니다.
WEBGPU 라는 Spec 이 공표되고 테스트가 진행 중이지만, 현재까지 Chrome 등의 Browser 에서 Default 로 지원되지는 않습니다.
WebGL2 는 IE를 제외한 대부분의 Browser 에서 지원하고 있기 때문에, Web에서 3D를 구현하려면, WebGL2를 활용하는게 좋을 것 같습니다.
WebGL2 Library WebGL 을 사용하는 가장 간단한 방법은 잘 구성된, 모듈을 사용하는 것이 가장 빠르고 편한 방법입니다.</description>
    </item>
    
  </channel>
</rss>
